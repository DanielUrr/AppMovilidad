import 'dart:convert';
import 'dart:math';
import 'package:flutter/services.dart';

class ChatbotService {
  Map<String, dynamic> _rutasData = {};
  bool _isLoaded = false;

  // Contexto de conversaci√≥n para mantener memoria
  List<Map<String, String>> _conversationHistory = [];
  Map<String, dynamic> _userContext = {};

  Future<void> _loadRutasData() async {
    if (!_isLoaded) {
      try {
        final String jsonString =
            await rootBundle.loadString('assets/data/rutas.json');
        _rutasData = json.decode(jsonString);
        _isLoaded = true;
      } catch (e) {
        _rutasData = {};
        _isLoaded = true;
      }
    }
  }

  Future<String> getResponse(String userMessage) async {
    await _loadRutasData();

    // Guardar mensaje en el historial
    _conversationHistory.add({
      'role': 'user',
      'message': userMessage,
    });

    String response = await _processMessage(userMessage);

    // Guardar respuesta en el historial
    _conversationHistory.add({
      'role': 'assistant',
      'message': response,
    });

    // Mantener solo los √∫ltimos 10 mensajes
    if (_conversationHistory.length > 20) {
      _conversationHistory =
          _conversationHistory.sublist(_conversationHistory.length - 20);
    }

    return response;
  }

  Future<String> _processMessage(String userMessage) async {
    final message = userMessage.toLowerCase().trim();

    // An√°lisis de intenci√≥n del usuario
    final intent = _analyzeIntent(message);

    switch (intent['type']) {
      case 'greeting':
        return _getGreetingResponse(message);
      case 'farewell':
        return _getFarewellResponse();
      case 'route_info':
        return _getRutaResponse(message);
      case 'fare':
        return _getTarifaResponse(message);
      case 'schedule':
        return _getHorarioResponse(message);
      case 'stops':
        return _getParaderosResponse(message);
      case 'navigation':
        return _getNavigationResponse(message);
      case 'real_time':
        return _getRealTimeResponse(message);
      case 'payment':
        return _getPaymentResponse(message);
      case 'help':
        return _getHelpResponse();
      case 'emergency':
        return _getEmergencyResponse();
      case 'complaint':
        return _getComplaintResponse();
      case 'suggestion':
        return _getSuggestionResponse(message);
      case 'weather':
        return _getWeatherResponse();
      case 'tourism':
        return _getTourismResponse(message);
      case 'accessibility':
        return _getAccessibilityResponse(message);
      case 'lost_found':
        return _getLostFoundResponse(message);
      case 'statistics':
        return _getStatisticsResponse();
      case 'comparison':
        return _getComparisonResponse(message);
      case 'recommendation':
        return _getRecommendationResponse(message);
      default:
        return _getIntelligentResponse(message);
    }
  }

  Map<String, dynamic> _analyzeIntent(String message) {
    // An√°lisis m√°s sofisticado de intenci√≥n
    if (_containsAny(message, [
      'hola',
      'buenos d√≠as',
      'buenas tardes',
      'qu√© tal',
      'saludos',
      'hey'
    ])) {
      return {'type': 'greeting'};
    }
    if (_containsAny(
        message, ['adi√≥s', 'chao', 'hasta luego', 'bye', 'nos vemos'])) {
      return {'type': 'farewell'};
    }
    if (_containsAny(message, [
      'tarifa',
      'precio',
      'costo',
      'valor',
      'cu√°nto cuesta',
      'cu√°nto vale'
    ])) {
      return {'type': 'fare'};
    }
    if (_containsAny(
        message, ['horario', 'hora', 'cuando', 'abre', 'cierra', 'funciona'])) {
      return {'type': 'schedule'};
    }
    if (_containsAny(message,
        ['paradero', 'parada', 'estaci√≥n', 'd√≥nde para', 'd√≥nde pasa'])) {
      return {'type': 'stops'};
    }
    if (_containsAny(message, [
      'c√≥mo llego',
      'c√≥mo voy',
      'ruta para',
      'quiero ir',
      'necesito ir',
      'llegar a'
    ])) {
      return {'type': 'navigation'};
    }
    if (_containsAny(message,
        ['d√≥nde est√°', 'tiempo real', 'cu√°nto falta', 'ya viene', 'demora'])) {
      return {'type': 'real_time'};
    }
    if (_containsAny(message,
        ['pagar', 'tarjeta', 'recarga', 'saldo', 'efectivo', 'pago'])) {
      return {'type': 'payment'};
    }
    if (_containsAny(message,
        ['emergencia', 'accidente', 'problema', 'ayuda urgente', 'polic√≠a'])) {
      return {'type': 'emergency'};
    }
    if (_containsAny(message,
        ['queja', 'reclamo', 'mal servicio', 'problema con', 'molesto'])) {
      return {'type': 'complaint'};
    }
    if (_containsAny(message,
        ['sugerir', 'sugerencia', 'mejorar', 'propongo', 'ser√≠a bueno'])) {
      return {'type': 'suggestion'};
    }
    if (_containsAny(message, ['clima', 'lluvia', 'tiempo', 'pron√≥stico'])) {
      return {'type': 'weather'};
    }
    if (_containsAny(
        message, ['turismo', 'visitar', 'conocer', 'lugares', 'sitios'])) {
      return {'type': 'tourism'};
    }
    if (_containsAny(
        message, ['discapacidad', 'silla de ruedas', 'accesible', 'rampa'])) {
      return {'type': 'accessibility'};
    }
    if (_containsAny(
        message, ['perd√≠', 'encontr√©', 'olvid√©', 'dej√©', 'perdido'])) {
      return {'type': 'lost_found'};
    }
    if (_containsAny(
        message, ['estad√≠stica', 'cu√°ntos', 'promedio', 'datos'])) {
      return {'type': 'statistics'};
    }
    if (_containsAny(
        message, ['mejor', 'm√°s r√°pido', 'm√°s barato', 'comparar', 'versus'])) {
      return {'type': 'comparison'};
    }
    if (_containsAny(
        message, ['recomienda', 'qu√© me sugieres', 'cu√°l es mejor'])) {
      return {'type': 'recommendation'};
    }
    if (_containsAny(message, ['ruta', 'l√≠nea', 'bus', 'informaci√≥n'])) {
      return {'type': 'route_info'};
    }
    if (_containsAny(message, ['ayuda', 'help', 'qu√© puedes', 'opciones'])) {
      return {'type': 'help'};
    }

    return {'type': 'general'};
  }

  String _getGreetingResponse(String message) {
    final hour = DateTime.now().hour;
    String timeGreeting = '';

    if (hour < 12) {
      timeGreeting = 'Buenos d√≠as';
    } else if (hour < 18) {
      timeGreeting = 'Buenas tardes';
    } else {
      timeGreeting = 'Buenas noches';
    }

    final responses = [
      '$timeGreeting! üëã Soy tu asistente inteligente de transporte. Puedo ayudarte con rutas, horarios, tarifas, navegaci√≥n y mucho m√°s. ¬øQu√© necesitas hoy?',
      '¬°Hola! $timeGreeting üòä Estoy aqu√≠ para hacer tu viaje m√°s f√°cil. Preg√∫ntame sobre rutas, paraderos, o c√≥mo llegar a tu destino.',
      '$timeGreeting! üöå ¬øListo para viajar? Te puedo ayudar con toda la informaci√≥n del transporte p√∫blico.',
    ];

    return responses[Random().nextInt(responses.length)];
  }

  String _getFarewellResponse() {
    final responses = [
      '¬°Hasta luego! üëã Que tengas un excelente viaje. Recuerda que estoy aqu√≠ cuando me necesites.',
      '¬°Adi√≥s! üòä Fue un placer ayudarte. ¬°Buen viaje y que llegues bien a tu destino!',
      '¬°Nos vemos! üöå Espero haberte sido √∫til. ¬°Cu√≠date y viaja seguro!',
    ];

    return responses[Random().nextInt(responses.length)];
  }

  String _getNavigationResponse(String message) {
    // Extraer posibles destinos del mensaje
    String origen = '';
    String destino = '';

    if (message.contains('centro')) destino = 'Centro';
    if (message.contains('hospital')) destino = 'Hospital';
    if (message.contains('terminal')) destino = 'Terminal';
    if (message.contains('unillanos')) destino = 'Unillanos';

    if (destino.isNotEmpty) {
      List<String> rutasRecomendadas = [];
      _rutasData.forEach((ruta, datos) {
        final paraderos = datos['paraderos'] as List;
        if (paraderos.any((p) => p['nombre']
            .toString()
            .toLowerCase()
            .contains(destino.toLowerCase()))) {
          rutasRecomendadas.add(ruta);
        }
      });

      if (rutasRecomendadas.isNotEmpty) {
        String respuesta = 'üó∫Ô∏è **Para llegar a $destino**, puedes tomar:\n\n';
        for (String ruta in rutasRecomendadas) {
          final datos = _rutasData[ruta];
          respuesta += 'üöå **$ruta**\n';
          respuesta += '   ‚Ä¢ Tarifa: \$${datos['tarifa']}\n';
          respuesta +=
              '   ‚Ä¢ Frecuencia: ${datos['frecuencia'] ?? 'Cada 15 minutos'}\n\n';
        }
        respuesta +=
            'üí° **Tip:** Revisa el mapa en tiempo real para ver la ubicaci√≥n actual de los buses.';
        return respuesta;
      }
    }

    return '''
üó∫Ô∏è **Navegaci√≥n y Rutas**

Para ayudarte mejor a llegar a tu destino, necesito saber:
‚Ä¢ ¬øD√≥nde est√°s ahora? (o usar√© tu ubicaci√≥n actual)
‚Ä¢ ¬øA d√≥nde quieres ir?

Puedo recomendarte:
‚úÖ La ruta m√°s r√°pida
‚úÖ La m√°s econ√≥mica
‚úÖ Con menos transbordos
‚úÖ La m√°s accesible

Por ejemplo, preg√∫ntame:
‚Ä¢ "C√≥mo llego al Centro desde Unillanos"
‚Ä¢ "Quiero ir al Hospital"
‚Ä¢ "Rutas para llegar a Terminal"
''';
  }

  String _getRealTimeResponse(String message) {
    // Simular respuesta en tiempo real
    final random = Random();
    final minutos = random.nextInt(15) + 1;

    String rutaMencionada = '';
    for (String ruta in _rutasData.keys) {
      if (message.toLowerCase().contains(ruta.toLowerCase())) {
        rutaMencionada = ruta;
        break;
      }
    }

    if (rutaMencionada.isNotEmpty) {
      return '''
üïê **Estado en Tiempo Real - $rutaMencionada**

üìç Pr√≥ximo bus llegar√° en: **$minutos minutos**

üöå Buses en ruta:
‚Ä¢ Bus #${random.nextInt(100) + 200}: A $minutos min
‚Ä¢ Bus #${random.nextInt(100) + 200}: A ${minutos + 10} min
‚Ä¢ Bus #${random.nextInt(100) + 200}: A ${minutos + 20} min

üìä Estado actual:
‚Ä¢ Tr√°fico: ${random.nextBool() ? 'Normal ‚úÖ' : 'Congestionado ‚ö†Ô∏è'}
‚Ä¢ Ocupaci√≥n: ${random.nextInt(70) + 20}%
‚Ä¢ Tiempo estimado de viaje: ${random.nextInt(20) + 15} minutos

üí° **Tip:** Activa las notificaciones para recibir alertas cuando el bus est√© cerca.
''';
    }

    return '''
üïê **Informaci√≥n en Tiempo Real**

Para darte informaci√≥n actualizada necesito saber:
‚Ä¢ ¬øQu√© ruta est√°s esperando?
‚Ä¢ ¬øEn qu√© paradero est√°s?

Puedo informarte sobre:
‚Ä¢ ‚è±Ô∏è Tiempo de llegada del pr√≥ximo bus
‚Ä¢ üöå Cantidad de buses en ruta
‚Ä¢ üìç Ubicaci√≥n actual de los buses
‚Ä¢ üö¶ Estado del tr√°fico
‚Ä¢ üë• Nivel de ocupaci√≥n

Ejemplo: "¬øCu√°nto falta para que llegue la Ruta 1?"
''';
  }

  String _getPaymentResponse(String message) {
    return '''
üí≥ **Opciones de Pago y Tarjeta**

**Formas de pago disponibles:**
‚Ä¢ üíµ Efectivo (pago exacto recomendado)
‚Ä¢ üí≥ Tarjeta de Transporte (recargable)
‚Ä¢ üì± Pago con QR (pr√≥ximamente)

**Tarjeta de Transporte:**
‚Ä¢ Precio de la tarjeta: \$5,000
‚Ä¢ Recarga m√≠nima: \$5,000
‚Ä¢ Recarga m√°xima: \$100,000
‚Ä¢ Descuento con tarjeta: 10%

**Puntos de recarga:**
‚Ä¢ üè™ Tiendas autorizadas
‚Ä¢ üè¶ Estaciones principales
‚Ä¢ üì± App m√≥vil (con PSE)
‚Ä¢ üèß Cajeros autom√°ticos

**Beneficios de la tarjeta:**
‚úÖ Descuentos en pasajes
‚úÖ Transbordos gratuitos (30 min)
‚úÖ Historial de viajes
‚úÖ Recarga en l√≠nea
‚úÖ Bloqueo por p√©rdida

¬øNecesitas ayuda con algo espec√≠fico sobre pagos?
''';
  }

  String _getEmergencyResponse() {
    return '''
üö® **N√öMEROS DE EMERGENCIA**

**L√≠neas de Emergencia:**
‚Ä¢ üöì Polic√≠a: 123
‚Ä¢ üöë Ambulancia: 125
‚Ä¢ üöí Bomberos: 119
‚Ä¢ üìû L√≠nea de emergencias: 123

**Seguridad en el Transporte:**
‚Ä¢ üì± WhatsApp Seguridad: +57 320 123 4567
‚Ä¢ üìû Central de Radio: (8) 678-9012

**En caso de emergencia en el bus:**
1. Mant√©n la calma
2. Notifica al conductor
3. Usa el bot√≥n de p√°nico si est√° disponible
4. Llama a las autoridades
5. Toma foto de la placa del bus

**Hospitales cercanos:**
‚Ä¢ üè• Hospital Departamental - Calle 37 #33-04
‚Ä¢ üè• Cl√≠nica Martha - Carrera 33 #15-48
‚Ä¢ üè• Cl√≠nica Meta - Calle 15 #23-17

¬øNecesitas ayuda inmediata? Por favor llama al 123.
''';
  }

  String _getComplaintResponse() {
    return '''
üìù **Quejas y Reclamos**

Lamento que hayas tenido una mala experiencia. Puedes reportar tu queja a trav√©s de:

**Canales de atenci√≥n:**
‚Ä¢ üìß Email: quejas@transportevillavicencio.gov.co
‚Ä¢ üìû L√≠nea gratuita: 018000-123456
‚Ä¢ üì± WhatsApp: +57 320 987 6543
‚Ä¢ üè¢ Oficina: Calle 40 #29-51 (Lun-Vie 8am-5pm)

**Informaci√≥n necesaria para tu queja:**
‚Ä¢ üöå N√∫mero de ruta
‚Ä¢ üìÖ Fecha y hora del incidente
‚Ä¢ üöå N√∫mero de placa del bus (si lo tienes)
‚Ä¢ üë§ Descripci√≥n del conductor (si aplica)
‚Ä¢ üìù Descripci√≥n detallada del problema

**Tipos de quejas comunes:**
‚Ä¢ Mal trato del conductor
‚Ä¢ Bus en mal estado
‚Ä¢ Incumplimiento de ruta
‚Ä¢ Cobro excesivo
‚Ä¢ Negaci√≥n del servicio

Tu queja ser√° atendida en m√°ximo 15 d√≠as h√°biles.
¬øTe gustar√≠a que te ayude a redactar tu queja?
''';
  }

  String _getSuggestionResponse(String message) {
    return '''
üí° **Gracias por tu sugerencia!**

Valoramos mucho tu opini√≥n para mejorar el servicio. 

**Puedes enviar tus sugerencias a:**
‚Ä¢ üìß sugerencias@transportevillavicencio.gov.co
‚Ä¢ üì± App oficial (secci√≥n "Sugerencias")
‚Ä¢ üè¢ Buz√≥n f√≠sico en terminales principales

**Temas frecuentes de mejora:**
‚Ä¢ üöè Nuevos paraderos
‚Ä¢ üïê Ajustes de horarios
‚Ä¢ üõ£Ô∏è Modificaci√≥n de rutas
‚Ä¢ ‚ôø Accesibilidad
‚Ä¢ üå± Sostenibilidad ambiental

Tu sugerencia ser√° evaluada por el comit√© de mejoramiento continuo.

**¬øSab√≠as que...?**
Las mejores sugerencias del mes reciben reconocimiento y pueden ganar premios como recargas gratis en la tarjeta de transporte.

¬°Gracias por ayudarnos a mejorar! üåü
''';
  }

  String _getWeatherResponse() {
    // Simular condiciones clim√°ticas
    final random = Random();
    final temp = random.nextInt(10) + 20;
    final isRaining = random.nextBool();

    return '''
üå§Ô∏è **Clima y Transporte**

**Pron√≥stico de hoy en Villavicencio:**
‚Ä¢ üå°Ô∏è Temperatura: ${temp}¬∞C
‚Ä¢ ${isRaining ? 'üåßÔ∏è Lluvia esperada' : '‚òÄÔ∏è D√≠a soleado'}
‚Ä¢ üí® Viento: 12 km/h

${isRaining ? '''
‚ö†Ô∏è **Precauciones por lluvia:**
‚Ä¢ Los buses pueden demorar 5-10 min m√°s
‚Ä¢ Lleva paraguas o impermeable
‚Ä¢ Ten cuidado al subir/bajar del bus
‚Ä¢ Algunos paraderos no tienen techo

**Rutas afectadas por lluvia:**
üöå Ruta 3 y 4: Posibles retrasos en zona Catama
üöå Ruta 6: Precauci√≥n en La Esperanza
''' : '''
‚úÖ **Condiciones favorables para viajar**
‚Ä¢ Tiempos normales en todas las rutas
‚Ä¢ Buena visibilidad
‚Ä¢ Sin afectaciones en el servicio
'''}

üí° **Tip:** Consulta el clima antes de salir para planear mejor tu viaje.
''';
  }

  String _getTourismResponse(String message) {
    return '''
üé≠ **Turismo en Villavicencio - C√≥mo Llegar en Bus**

**Sitios Tur√≠sticos y Rutas:**

üèõÔ∏è **Catedral Nuestra Se√±ora del Carmen**
‚Ä¢ üìç Centro - Rutas 1, 3, 4
‚Ä¢ üöå Paradero: Centro

üå≥ **Parque Los Fundadores**
‚Ä¢ üìç Centro - Rutas 1, 3, 4
‚Ä¢ üöå Paradero: Centro

üé™ **Parque Las Malocas**
‚Ä¢ üìç V√≠a Catama - Ruta 2
‚Ä¢ üöå Paradero: Catama

üèõÔ∏è **Casa de la Cultura**
‚Ä¢ üìç Centro - Rutas 1, 3, 4
‚Ä¢ üöå Paradero: Centro

üåä **Bioparque Los Ocarros**
‚Ä¢ üìç V√≠a Restrepo - Ruta especial (consultar)
‚Ä¢ üöå Salida desde Terminal

**Eventos y Festivales:**
‚Ä¢ üé≠ Festival Llanero (Julio)
‚Ä¢ üéµ Torneo Internacional del Joropo
‚Ä¢ üé® Feria Agroindustrial

**Tips para turistas:**
‚Ä¢ üé´ Compra un pase diario: \$15,000
‚Ä¢ üì± Descarga el mapa offline
‚Ä¢ üåÖ Mejores horas: 6-10am y 4-7pm
‚Ä¢ üíß Lleva agua, hace calor

¬øQu√© lugar te gustar√≠a visitar?
''';
  }

  String _getAccessibilityResponse(String message) {
    return '''
‚ôø **Accesibilidad en el Transporte**

**Servicios para personas con discapacidad:**

**Buses accesibles:**
‚Ä¢ üöå 30% de la flota con rampa
‚Ä¢ ü™ë Espacios para sillas de ruedas
‚Ä¢ üîî Timbres accesibles
‚Ä¢ üì¢ Anuncios auditivos

**Rutas con mayor accesibilidad:**
‚úÖ Ruta 1: 80% buses accesibles
‚úÖ Ruta 3: 70% buses accesibles
‚úÖ Ruta 5: 60% buses accesibles

**Paraderos accesibles:**
‚Ä¢ üöè Centro - Rampa y se√±alizaci√≥n braille
‚Ä¢ üöè Hospital - Totalmente accesible
‚Ä¢ üöè Terminal - Ascensor y rampas
‚Ä¢ üöè Unillanos - Parcialmente accesible

**Servicios especiales:**
‚Ä¢ üìû L√≠nea preferencial: (8) 678-3456
‚Ä¢ üÜì Descuento 50% con carnet
‚Ä¢ üë• Asistencia personalizada
‚Ä¢ üì± App con modo accesibilidad

**Horarios con asistencia:**
‚Ä¢ Lunes a Viernes: 6am - 8pm
‚Ä¢ S√°bados: 7am - 5pm

¬øNecesitas informaci√≥n espec√≠fica sobre accesibilidad?
''';
  }

  String _getLostFoundResponse(String message) {
    return '''
üì¶ **Objetos Perdidos**

**¬øPerdiste algo en el bus?**

**Pasos a seguir:**
1. üìû Llama inmediatamente: (8) 678-5555
2. üìù Proporciona:
   ‚Ä¢ Ruta y n√∫mero de bus
   ‚Ä¢ Hora aproximada
   ‚Ä¢ Descripci√≥n del objeto
   ‚Ä¢ Tu informaci√≥n de contacto

**Oficina de Objetos Perdidos:**
‚Ä¢ üìç Terminal de Transporte, Oficina 201
‚Ä¢ üïê Lun-Vie: 8am-5pm, S√°b: 8am-12pm
‚Ä¢ üìß objetosperdidos@transportevilla.gov.co

**Objetos m√°s comunes:**
‚Ä¢ üì± Celulares (40%)
‚Ä¢ üëõ Billeteras (25%)
‚Ä¢ üéí Mochilas (15%)
‚Ä¢ üîë Llaves (10%)
‚Ä¢ üìö Otros (10%)

**Tips para no perder objetos:**
‚úÖ Revisa tu asiento antes de bajar
‚úÖ Guarda objetos de valor en bolsillos con cierre
‚úÖ Mant√©n tu mochila al frente
‚úÖ Toma foto del n√∫mero del bus

**Tiempo de custodia:** 30 d√≠as

¬øQu√© objeto perdiste? Te puedo ayudar con el reporte.
''';
  }

  String _getStatisticsResponse() {
    final random = Random();

    return '''
üìä **Estad√≠sticas del Sistema de Transporte**

**Datos del servicio (mes actual):**
‚Ä¢ üöå Buses en operaci√≥n: 127
‚Ä¢ üë• Pasajeros diarios: ${(random.nextInt(5000) + 15000).toString()}
‚Ä¢ üìç Paraderos activos: 84
‚Ä¢ üõ£Ô∏è Kil√≥metros recorridos: ${(random.nextInt(50000) + 150000).toString()}

**Rutas m√°s utilizadas:**
1. ü•á Ruta 1: 35% de pasajeros
2. ü•à Ruta 2: 25% de pasajeros
3. ü•â Ruta 3: 20% de pasajeros

**Horas pico:**
‚Ä¢ üåÖ Ma√±ana: 6:30am - 8:30am
‚Ä¢ üåÜ Tarde: 5:00pm - 7:30pm
‚Ä¢ üìà Incremento: +150% pasajeros

**Satisfacci√≥n del usuario:**
‚Ä¢ ‚≠ê‚≠ê‚≠ê‚≠ê 4.2/5.0
‚Ä¢ üòä 78% satisfechos
‚Ä¢ üîÑ 92% puntualidad

**Datos ambientales:**
‚Ä¢ üå± CO‚ÇÇ evitado: 2,500 ton/mes
‚Ä¢ ‚ö° Buses el√©ctricos: 12 (10%)
‚Ä¢ üå≥ Equivalente: 10,000 √°rboles

¬øTe interesa alg√∫n dato espec√≠fico?
''';
  }

  String _getComparisonResponse(String message) {
    return '''
‚öñÔ∏è **Comparaci√≥n de Rutas**

Analizar√© las mejores opciones para ti:

**Comparaci√≥n General de Rutas:**

üìä **Por Velocidad:**
‚Ä¢ üöÄ M√°s r√°pida: Ruta 1 (menos paradas)
‚Ä¢ üê¢ M√°s lenta: Ruta 6 (m√°s paradas)

üí∞ **Por Precio:**
‚Ä¢ Todas las rutas: \$2,500
‚Ä¢ Con tarjeta: \$2,250 (10% desc.)

‚è∞ **Por Frecuencia:**
‚Ä¢ Mejor: Ruta 1 - cada 10 min
‚Ä¢ Regular: Ruta 2,3,5 - cada 15 min
‚Ä¢ Menor: Ruta 6 - cada 25 min

üöè **Por Cobertura:**
‚Ä¢ Mayor: Ruta 4 (cruza toda la ciudad)
‚Ä¢ Menor: Ruta 6 (sector espec√≠fico)

**¬øQu√© es m√°s importante para ti?**
‚Ä¢ ‚ö° Velocidad
‚Ä¢ üí∞ Econom√≠a
‚Ä¢ üïê Frecuencia
‚Ä¢ üìç Cobertura

Dime tu prioridad y te recomendar√© la mejor opci√≥n.
''';
  }

  String _getRecommendationResponse(String message) {
    final hour = DateTime.now().hour;
    String recomendacion = '';

    if (hour >= 6 && hour <= 9) {
      recomendacion = '''
üåÖ **Recomendaciones para la Hora Pico Matutina:**

‚úÖ Sal 10 minutos antes
‚úÖ Usa la Ruta 1 o 3 (mayor frecuencia)
‚úÖ Evita llevar maletas grandes
‚úÖ Ten el pasaje exacto listo
''';
    } else if (hour >= 17 && hour <= 19) {
      recomendacion = '''
üåÜ **Recomendaciones para la Hora Pico Vespertina:**

‚úÖ Considera rutas alternativas
‚úÖ La Ruta 2 suele estar menos congestionada
‚úÖ Espera en paraderos techados
‚úÖ Activa notificaciones de llegada
''';
    } else {
      recomendacion = '''
üòå **Recomendaciones Hora Valle:**

‚úÖ Buen momento para viajar
‚úÖ Buses menos llenos
‚úÖ Tiempos de viaje m√°s cortos
‚úÖ Mayor disponibilidad de asientos
''';
    }

    return '''
üéØ **Mis Recomendaciones Personalizadas**

$recomendacion

**Apps √∫tiles:**
‚Ä¢ üì± Waze - Para ver tr√°fico
‚Ä¢ üó∫Ô∏è Google Maps - Rutas alternativas
‚Ä¢ ‚è∞ Alarma - No perder el bus

**Consejos de seguridad:**
‚Ä¢ üëÄ Mant√©n tus pertenencias vigiladas
‚Ä¢ üìµ Evita mostrar el celular innecesariamente
‚Ä¢ üö™ Espera que el bus se detenga completamente
‚Ä¢ üí∫ Cede el asiento a quien lo necesite

**Mejores momentos para viajar:**
‚Ä¢ üå§Ô∏è 9am - 11am: Poco tr√°fico
‚Ä¢ ‚òï 2pm - 4pm: Tranquilo
‚Ä¢ üåô Despu√©s de 8pm: R√°pido

¬øNecesitas una recomendaci√≥n espec√≠fica?
''';
  }

  String _getTarifaResponse(String message) {
    // Buscar ruta espec√≠fica en el mensaje
    for (String rutaName in _rutasData.keys) {
      if (message.contains(rutaName.toLowerCase())) {
        final tarifa = _rutasData[rutaName]['tarifa'];
        return '''
üí∞ **Informaci√≥n de Tarifas - $rutaName**

**Tarifa actual:** \$$tarifa

**Descuentos disponibles:**
‚Ä¢ üë®‚Äçüéì Estudiantes: 50% (\$1,250)
‚Ä¢ üë¥ Adultos mayores: 50% (\$1,250)
‚Ä¢ ‚ôø Personas con discapacidad: 50%
‚Ä¢ üí≥ Con tarjeta recargable: 10% (\$2,250)

**Pases especiales:**
‚Ä¢ üìÖ Pase diario: \$15,000 (viajes ilimitados)
‚Ä¢ üìÖ Pase semanal: \$70,000
‚Ä¢ üìÖ Pase mensual: \$180,000

**Transbordos:**
‚Ä¢ ‚è±Ô∏è Gratis dentro de 30 minutos (con tarjeta)
‚Ä¢ üíµ Sin tarjeta: Tarifa completa

¬øNecesitas informaci√≥n sobre descuentos o pases?
''';
      }
    }

    // Respuesta general sobre tarifas
    return '''
üí∞ **Sistema de Tarifas del Transporte P√∫blico**

**Tarifa general:** \$2,500 (todas las rutas)

**Descuentos especiales:**
‚Ä¢ üë®‚Äçüéì Estudiantes: 50% con carnet vigente
‚Ä¢ üë¥ Adultos mayores (62+): 50%
‚Ä¢ ‚ôø Personas con discapacidad: 50%
‚Ä¢ üë∂ Ni√±os menores de 5 a√±os: Gratis
‚Ä¢ üí≥ Pago con tarjeta: 10% descuento

**Opciones de ahorro:**
‚Ä¢ üìÖ Pase diario: \$15,000
‚Ä¢ üìÖ Pase semanal: \$70,000
‚Ä¢ üìÖ Pase mensual: \$180,000
‚Ä¢ üìÖ Pase estudiantil mensual: \$90,000

**¬øSab√≠as que...?**
Con el pase mensual ahorras hasta 40% si viajas todos los d√≠as.

¬øQu√© tipo de tarifa te interesa?
''';
  }

  String _getHorarioResponse(String message) {
    // Buscar ruta espec√≠fica
    for (String rutaName in _rutasData.keys) {
      if (message.contains(rutaName.toLowerCase())) {
        final horario = _rutasData[rutaName]['horario'];
        final frecuencia =
            _rutasData[rutaName]['frecuencia'] ?? 'Cada 15 minutos';
        return '''
üïê **Horarios - $rutaName**

**Horario de servicio:** $horario
**Frecuencia:** $frecuencia

**Primer bus:** ${horario.split(' - ')[0]}
**√öltimo bus:** ${horario.split(' - ')[1]}

**Horarios especiales:**
‚Ä¢ üåÖ Hora pico AM: Cada 7 minutos
‚Ä¢ üåÜ Hora pico PM: Cada 8 minutos
‚Ä¢ üìÖ Domingos: Frecuencia reducida 50%
‚Ä¢ üéÑ Festivos: Consultar horario especial

üí° **Tip:** En horas pico, espera en paraderos principales para mayor frecuencia.
''';
      }
    }

    // Informaci√≥n general de horarios
    String horariosCompletos = '''
üïê **Horarios del Sistema de Transporte**

**Horario general de servicio:**
‚Ä¢ Lunes a S√°bado: 5:00 AM - 10:30 PM
‚Ä¢ Domingos y festivos: 6:00 AM - 9:00 PM

**Horarios por ruta:**
''';

    _rutasData.forEach((ruta, datos) {
      horariosCompletos += '\nüöå **$ruta:**\n';
      horariosCompletos += '   ‚Ä¢ Horario: ${datos['horario']}\n';
      horariosCompletos +=
          '   ‚Ä¢ Frecuencia: ${datos['frecuencia'] ?? 'Cada 15 minutos'}\n';
    });

    horariosCompletos += '''

**Horas pico (mayor frecuencia):**
‚Ä¢ üåÖ 6:30 AM - 8:30 AM
‚Ä¢ üåÜ 5:00 PM - 7:30 PM

**Servicios especiales:**
‚Ä¢ üéÑ Navidad/A√±o Nuevo: Hasta 2:00 AM
‚Ä¢ ‚öΩ Eventos deportivos: Servicio extendido
‚Ä¢ üé≠ Festivales: Rutas adicionales

¬øNecesitas el horario de alguna ruta espec√≠fica?
''';

    return horariosCompletos;
  }

  String _getParaderosResponse(String message) {
    // Buscar si menciona una ruta espec√≠fica
    for (String rutaName in _rutasData.keys) {
      if (message.contains(rutaName.toLowerCase())) {
        final paraderos = _rutasData[rutaName]['paraderos'] as List;
        String respuesta = 'üöè **Paraderos de la $rutaName:**\n\n';

        for (int i = 0; i < paraderos.length; i++) {
          respuesta += '${i + 1}. üìç ${paraderos[i]['nombre']}\n';
        }

        respuesta += '\n**Informaci√≥n adicional:**\n';
        respuesta += '‚Ä¢ üïê Tiempo entre paraderos: 3-5 minutos\n';
        respuesta += '‚Ä¢ ‚ôø Paraderos accesibles marcados con rampa\n';
        respuesta += '‚Ä¢ üöè Algunos paraderos tienen techo y asientos\n';

        return respuesta;
      }
    }

    // Buscar si menciona un paradero espec√≠fico
    Map<String, List<String>> paraderoRutas = {};
    _rutasData.forEach((ruta, datos) {
      final paraderos = datos['paraderos'] as List;
      for (var paradero in paraderos) {
        String nombre = paradero['nombre'];
        if (!paraderoRutas.containsKey(nombre)) {
          paraderoRutas[nombre] = [];
        }
        paraderoRutas[nombre]!.add(ruta);
      }
    });

    for (String paraderoNombre in paraderoRutas.keys) {
      if (message.contains(paraderoNombre.toLowerCase())) {
        String respuesta = 'üöè **Paradero: $paraderoNombre**\n\n';
        respuesta += '**Rutas que pasan por aqu√≠:**\n';
        for (String ruta in paraderoRutas[paraderoNombre]!) {
          respuesta += '‚Ä¢ üöå $ruta\n';
        }
        respuesta += '\n**Servicios en el paradero:**\n';
        respuesta += '‚Ä¢ ü™ë Asientos disponibles\n';
        respuesta += '‚Ä¢ ‚òÇÔ∏è Techo para lluvia\n';
        respuesta += '‚Ä¢ üí° Iluminaci√≥n nocturna\n';
        respuesta += '‚Ä¢ üì± Informaci√≥n digital (pr√≥ximamente)\n';

        return respuesta;
      }
    }

    // Respuesta general
    return '''
üöè **Sistema de Paraderos**

**Paraderos principales con todas las rutas:**
‚Ä¢ üìç Centro - Hub principal
‚Ä¢ üìç Terminal - Conexi√≥n intermunicipal
‚Ä¢ üìç Hospital - Zona m√©dica
‚Ä¢ üìç Unillanos - Zona universitaria

**Tipos de paraderos:**
‚Ä¢ üèõÔ∏è **Tipo A:** Techado, asientos, informaci√≥n digital
‚Ä¢ üöè **Tipo B:** Techado, se√±alizaci√≥n
‚Ä¢ üìç **Tipo C:** Se√±alizaci√≥n b√°sica

**Mejoras en proceso:**
‚Ä¢ üì± Pantallas con tiempos de llegada
‚Ä¢ ‚ôø 100% accesibilidad para 2025
‚Ä¢ üå≥ Zonas verdes y sombra
‚Ä¢ üì∂ WiFi gratuito en paraderos principales

¬øBuscas informaci√≥n de alg√∫n paradero espec√≠fico?
''';
  }

  String _getRutaResponse(String message) {
    // Buscar ruta espec√≠fica en el mensaje
    for (String rutaName in _rutasData.keys) {
      if (message.contains(rutaName.toLowerCase())) {
        final datos = _rutasData[rutaName];
        final paraderos =
            (datos['paraderos'] as List).map((p) => p['nombre']).join(' ‚Üí ');

        return '''
üöå **$rutaName**

üìç **Recorrido:** $paraderos

üí∞ **Tarifa:** \$${datos['tarifa']}

üïê **Horario:** ${datos['horario']}

‚è±Ô∏è **Frecuencia:** ${datos['frecuencia'] ?? 'Cada 15 minutos'}

üí° **Tips para esta ruta:**
‚Ä¢ Menos concurrida entre 10am-12pm
‚Ä¢ Mayor frecuencia en horas pico
‚Ä¢ Buses con aire acondicionado disponibles

¬øNecesitas m√°s informaci√≥n sobre esta ruta?
''';
      }
    }

    // Mostrar todas las rutas disponibles
    if (_rutasData.isNotEmpty) {
      String rutasInfo = 'üöå **Rutas disponibles:**\n\n';
      _rutasData.forEach((ruta, datos) {
        rutasInfo += '‚Ä¢ $ruta - \$${datos['tarifa']} - ${datos['horario']}\n';
      });
      rutasInfo += '\n¬øTe interesa informaci√≥n espec√≠fica de alguna ruta?';
      return rutasInfo;
    }

    return 'No tengo informaci√≥n de rutas cargada en este momento. üòî';
  }

  String _getIntelligentResponse(String message) {
    // Sistema de respuesta inteligente basado en contexto

    // Verificar si es una pregunta
    if (message.contains('?')) {
      // Analizar tipo de pregunta
      if (_containsAny(message, ['qu√©', 'que', 'cu√°l', 'cual'])) {
        return _handleWhatQuestion(message);
      } else if (_containsAny(message, ['c√≥mo', 'como'])) {
        return _handleHowQuestion(message);
      } else if (_containsAny(message, ['d√≥nde', 'donde'])) {
        return _handleWhereQuestion(message);
      } else if (_containsAny(message, ['cu√°ndo', 'cuando'])) {
        return _handleWhenQuestion(message);
      } else if (_containsAny(message, ['por qu√©', 'porque'])) {
        return _handleWhyQuestion(message);
      }
    }

    // Si no es pregunta, analizar el sentimiento
    if (_containsAny(
        message, ['gracias', 'excelente', 'perfecto', 'genial', 'bueno'])) {
      return '''
üòä ¬°Me alegra poder ayudarte!

Si necesitas algo m√°s, aqu√≠ estoy para:
‚Ä¢ üó∫Ô∏è Planificar tu ruta
‚Ä¢ üïê Consultar horarios
‚Ä¢ üí∞ Informaci√≥n de tarifas
‚Ä¢ üìç Ubicar paraderos
‚Ä¢ üöå Estado en tiempo real

¬°Que tengas un excelente viaje! üöå‚ú®
''';
    }

    if (_containsAny(
        message, ['no entiendo', 'confundido', 'no s√©', 'ayuda'])) {
      return _getHelpResponse();
    }

    // Respuesta general contextual
    return '''
ü§î Entiendo que necesitas informaci√≥n sobre "$message".

Puedo ayudarte mejor si me das m√°s detalles. Por ejemplo:

**Si buscas una ruta:**
‚Ä¢ "¬øC√≥mo llego a [destino]?"
‚Ä¢ "¬øQu√© ruta va a [lugar]?"

**Si necesitas horarios:**
‚Ä¢ "¬øA qu√© hora pasa la Ruta X?"
‚Ä¢ "¬øHasta qu√© hora hay servicio?"

**Si es sobre tarifas:**
‚Ä¢ "¬øCu√°nto cuesta el pasaje?"
‚Ä¢ "¬øHay descuentos para estudiantes?"

**Otras consultas:**
‚Ä¢ Estado del tr√°fico
‚Ä¢ Objetos perdidos
‚Ä¢ Quejas o sugerencias

¬øC√≥mo puedo ayudarte espec√≠ficamente?
''';
  }

  String _handleWhatQuestion(String message) {
    return '''
üìã Aqu√≠ est√° la informaci√≥n que buscas:

Bas√°ndome en tu pregunta, puedo ofrecerte:

‚Ä¢ üìä Datos espec√≠ficos del sistema
‚Ä¢ üöå Informaci√≥n de rutas
‚Ä¢ üí∞ Detalles de tarifas
‚Ä¢ üïê Horarios actualizados
‚Ä¢ üìç Ubicaciones de paraderos

Por favor, s√© m√°s espec√≠fico para darte la informaci√≥n exacta.
''';
  }

  String _handleHowQuestion(String message) {
    return '''
üìñ Te explico el proceso:

Para realizar lo que preguntas:

1. Primero identifica tu ubicaci√≥n actual
2. Selecciona tu destino
3. Elige la ruta m√°s conveniente
4. Verifica horarios y tarifas
5. Dir√≠gete al paradero m√°s cercano

¬øNecesitas ayuda con alg√∫n paso espec√≠fico?
''';
  }

  String _handleWhereQuestion(String message) {
    return '''
üìç Informaci√≥n de ubicaci√≥n:

Puedo ayudarte a encontrar:
‚Ä¢ Paraderos cercanos
‚Ä¢ Rutas espec√≠ficas
‚Ä¢ Puntos de recarga
‚Ä¢ Oficinas de atenci√≥n

Usa el mapa en la app para ver ubicaciones en tiempo real.

¬øQu√© ubicaci√≥n espec√≠fica necesitas?
''';
  }

  String _handleWhenQuestion(String message) {
    return '''
‚è∞ Informaci√≥n de tiempos:

Los horarios var√≠an seg√∫n:
‚Ä¢ La ruta espec√≠fica
‚Ä¢ El d√≠a de la semana
‚Ä¢ Si es festivo o no

Consulta los horarios detallados de cada ruta en la secci√≥n de horarios.

¬øQu√© horario espec√≠fico necesitas?
''';
  }

  String _handleWhyQuestion(String message) {
    return '''
‚ÑπÔ∏è Explicaci√≥n:

Las pol√≠ticas y procedimientos del sistema de transporte buscan:
‚Ä¢ Eficiencia en el servicio
‚Ä¢ Seguridad de los pasajeros
‚Ä¢ Sostenibilidad ambiental
‚Ä¢ Accesibilidad universal

Si tienes dudas espec√≠ficas sobre alguna pol√≠tica, puedes contactar a atenci√≥n al cliente.
''';
  }

  String _getHelpResponse() {
    return '''
ü§ñ **¬°Hola! Soy tu Asistente Inteligente de Transporte**

Puedo ayudarte con TODO sobre el transporte p√∫blico:

**üöå Informaci√≥n de Rutas**
‚Ä¢ "¬øQu√© rutas hay disponibles?"
‚Ä¢ "Informaci√≥n de la Ruta X"
‚Ä¢ "¬øQu√© ruta va al Centro?"

**üó∫Ô∏è Navegaci√≥n**
‚Ä¢ "¬øC√≥mo llego a [destino]?"
‚Ä¢ "Ruta m√°s r√°pida a [lugar]"
‚Ä¢ "¬øD√≥nde est√° el paradero m√°s cercano?"

**üí∞ Tarifas y Pagos**
‚Ä¢ "¬øCu√°nto cuesta el pasaje?"
‚Ä¢ "¬øHay descuentos?"
‚Ä¢ "¬øC√≥mo recargo mi tarjeta?"

**üïê Horarios**
‚Ä¢ "¬øA qu√© hora pasa el bus?"
‚Ä¢ "Horarios de la Ruta X"
‚Ä¢ "¬øHasta qu√© hora hay servicio?"

**üìç Paraderos**
‚Ä¢ "Paraderos de la Ruta X"
‚Ä¢ "¬øQu√© rutas pasan por [paradero]?"
‚Ä¢ "Paraderos con techo cerca"

**üïí Tiempo Real**
‚Ä¢ "¬øCu√°nto falta para que llegue?"
‚Ä¢ "¬øD√≥nde est√° el bus?"
‚Ä¢ "Estado del tr√°fico"

**üÜò Emergencias y Seguridad**
‚Ä¢ "N√∫meros de emergencia"
‚Ä¢ "Reportar un incidente"
‚Ä¢ "Hospitales cercanos"

**üìù Quejas y Sugerencias**
‚Ä¢ "Quiero hacer una queja"
‚Ä¢ "Tengo una sugerencia"
‚Ä¢ "C√≥mo contactar servicio al cliente"

**‚ôø Accesibilidad**
‚Ä¢ "Buses con rampa"
‚Ä¢ "Paraderos accesibles"
‚Ä¢ "Ayuda para discapacidad"

**üì¶ Objetos Perdidos**
‚Ä¢ "Perd√≠ algo en el bus"
‚Ä¢ "D√≥nde reclamo objetos"

**üå§Ô∏è Clima y Transporte**
‚Ä¢ "¬øC√≥mo est√° el clima?"
‚Ä¢ "Rutas afectadas por lluvia"

**üé≠ Turismo**
‚Ä¢ "C√≥mo llegar a sitios tur√≠sticos"
‚Ä¢ "Rutas para turistas"

**üìä Estad√≠sticas**
‚Ä¢ "Datos del sistema"
‚Ä¢ "Rutas m√°s usadas"

¬°Preg√∫ntame lo que necesites! Estoy aqu√≠ 24/7 para ayudarte üöå‚ú®
''';
  }

  bool _containsAny(String text, List<String> keywords) {
    return keywords.any((keyword) => text.contains(keyword));
  }
}
